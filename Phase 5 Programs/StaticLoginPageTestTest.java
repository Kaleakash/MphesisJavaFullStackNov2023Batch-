// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class StaticLoginPageTestTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void staticLoginPageTest() {
    // Test name: StaticLoginPageTest
    // Step # | name | target | value
    // 1 | open | http://127.0.0.1:5500/index.html | 
    driver.get("http://127.0.0.1:5500/index.html");
    // 2 | setWindowSize | 1296x688 | 
    driver.manage().window().setSize(new Dimension(1296, 688));
    // 3 | click | id=b1 | 
    driver.findElement(By.id("b1")).click();
    // 4 | assertAlert | Emailid is required | 
    assertThat(driver.switchTo().alert().getText(), is("Emailid is required"));
    // 5 | click | id=email | 
    driver.findElement(By.id("email")).click();
    // 6 | type | id=email | vikash@gmail.com
    driver.findElement(By.id("email")).sendKeys("vikash@gmail.com");
    // 7 | click | id=b1 | 
    driver.findElement(By.id("b1")).click();
    // 8 | assertAlert | Password is required | 
    assertThat(driver.switchTo().alert().getText(), is("Password is required"));
    // 9 | click | id=password | 
    driver.findElement(By.id("password")).click();
    // 10 | type | id=password | 122222
    driver.findElement(By.id("password")).sendKeys("122222");
    // 11 | click | id=b1 | 
    driver.findElement(By.id("b1")).click();
    // 12 | assertAlert | failure try once again | 
    assertThat(driver.switchTo().alert().getText(), is("failure try once again"));
    // 13 | click | id=b2 | 
    driver.findElement(By.id("b2")).click();
    // 14 | click | id=email | 
    driver.findElement(By.id("email")).click();
    // 15 | type | id=email | akash@gmail.com
    driver.findElement(By.id("email")).sendKeys("akash@gmail.com");
    // 16 | type | id=password | 123
    driver.findElement(By.id("password")).sendKeys("123");
    // 17 | click | id=b1 | 
    driver.findElement(By.id("b1")).click();
    // 18 | assertAlert | Successfully login | 
    assertThat(driver.switchTo().alert().getText(), is("Successfully login"));
  }
}
